library("ggplot2")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
populationByState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME, sum(p.CENSUS2010POP)
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
group by s.STATE_NAME
order by s.STATE_NAME asc")
populationByStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME, r.RACE_NAME, sum(p.CENSUS2010POP)
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
#head(population)
#head(diamonds)'
head(populationByState)
ggplot(data = diamonds) + geom_histogram(aes(x = s.STATE_NAME))
ggplot(data = diamonds) + geom_histogram(aes(x = STATE_NAME))
ggplot(data = diamonds) + geom_histogram(aes(x = STATE))
ggplot(data = PopulationByState) + geom_histogram(aes(x = s.STATE_NAME))
ggplot(data = populationByState) + geom_histogram(aes(x = s.STATE_NAME))
ggplot(data = populationByState) + geom_histogram(aes(x = STATE))
ggplot(data = populationByState) + geom_histogram(aes(x = State))
head(diamonds)
library("ggplot2")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
group by s.STATE_NAME
order by s.STATE_NAME asc")
popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME, r.RACE_NAME, sum(p.CENSUS2010POP)
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
library("ggplot2")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
group by s.STATE_NAME
order by s.STATE_NAME asc")
popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME, r.RACE_NAME, sum(p.CENSUS2010POP)
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
#head(population)
#head(diamonds)'
head(popState)
ggplot(popState, aes(x = POPULATION, y = NAME)) + geom_point()
ggplot(popState, aes(x = POPULATION, y = STATE)) + geom_point()
ggplot(popState, aes(x = POPULATION, y = STATE))
ggplot(popState, aes(x = POPULATION, y = STATE)) + geom_point(aes(color = color))
ggplot(popState, aes(x = POPULATION, y = STATE)) + geom_point(aes(POPULATION = color))
ggplot(popState, aes(x = POPULATION, y = STATE)) + geom_point(aes(color = POPULATION))
ggplot(popState, aes(x = POPULATION, y = STATE)) + geom_dotplot(aes(color = POPULATION))
ggplot(popState, aes(x = STATE, y = POPULATION)) + geom_dotplot(aes(color = POPULATION))
ggplot(data = popState) + geom_histogram(aes(x = STATE, y = POPULATION))
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar()
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar() + facet_wrap(~STATE)
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity")
qplot(factor(POPULATION), data=popState, geom="bar", fill=factor(POPULATION))
qplot(POPULATION, data=popState, geom="bar", fill=factor(POPULATION))
qplot(STATE,POPULATION, data=popState, geom="bar", fill=factor(POPULATION))
qplot(aes(y = POPULATION, x = STATE), data=popState, geom="bar", fill=factor(POPULATION))
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity")
qplot(POPULATION, STATE, geom="bar", stat="identity")
ggplot(data = diamonds) + geom_density(aes(x = carat, fill = "gray50"))
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
ggplot(diamonds, aes(x = carat, y = price)) + geom_point(aes(color = color))
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity")
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity")
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity", width = 1000000)
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity")
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity")
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + geo_hline()
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + geom_hline()
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + geom_hline()
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity") + geom_hline()
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity")) + geom_hline()
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity") + geom_hline())
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity") + geom_hline()
ggplot(popState, aes(y = STATE, x = POPULATION), width = 100000) + geom_bar(stat = "identity") + geom_hline()
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity") + geom_hline() + width = 100000
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip()
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip()
ggplot(popState, aes(y = STATE, x = POPULATION)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip()
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip()
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip() + ggtitle("Population by State")
x@STATE
STATE
popState@STATE2 <-factor(popState@STATEm popState@POPULATION)
popState@STATE2 <-factor(popState@STATE popState@POPULATION)
popState$STATE2 <-factor(popState$STATE popState$POPULATION)
popState$STATE2 <-factor(popState$STATE, popState$POPULATION)
ggplot(popState, aes(y = POPULATION, x = STATE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip() + ggtitle("Population by State")
ggplot(popState, aes(y = POPULATION, x = STATE@)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip() + ggtitle("Population by State")
ggplot(popState, aes(y = POPULATION, x = STATE2)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip() + ggtitle("Population by State")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))  + coord_flip() + ggtitle("Population by State")
popState$STATE2 <-factor(popState$STATE, popState$POPULATION)
gpopState + geom_bar(stat = "identity", aes(x=STATE2, data = popState)
gpopState
gpopState + geom_bar(stat = "identity", aes(x=STATE2, data = popState)
gpopState + geom_bar(stat = "identity", aes(x=STATE2, data = popState))
gpopState + geom_bar(aes(x=STATE2), data = popState) , stat = "identity")
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
popState$STATE2 <-factor(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State")
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_x_continuous(labels = comma)
library("scales", lib.loc="F:/Program Files/R/R-3.0.3/library")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_x_continuous(labels = comma)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_x_continuous(labels = comma)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_x_continuous(labels = comma)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State")
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels=fancy_scientific)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = formatter)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
gpopState + geom_bar(aes(x=STATE2), data = popState) , stat = "identity")
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
