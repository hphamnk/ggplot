INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 1
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#black pop by state
blackState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 2
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#native indian pop by state
indianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 3
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#asian pop by state
asianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 4
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#hawaii pop by state
hawaiiState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 5
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#population by state, age, sex
popSAS <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
where p.ORIGIN_ID = 0 and (p.SEX_ID = 1 or p.SEX_ID = 2)
group by s.STATE_NAME, p.AGE, s2.SEX_NAME
order by s.STATE_NAME, p.AGE, s2.SEX_NAME asc")
#total population by state
TotalPop <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as TotalPopulation from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#male population by state
MalePop <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as MalePopulation from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.SEX_ID = 1
group by s.STATE_NAME
order by s.STATE_NAME asc")
#population with state, race, age, sex
popAll <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
group by s.STATE_NAME, r.RACE_NAME, p.AGE, s2.SEX_NAME
order by s.STATE_NAME, r.RACE_NAME, p.AGE, s2.SEX_NAME asc")
#texas population by different races
TexasAges1 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 1
")
TexasAges2 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 2
")
TexasAges3 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 3
")
TexasAges5 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 5
")
# cali population
popCali <- dbGetQuery(jdbcConnection, "select p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
where p.ORIGIN_ID = 0 and (p.SEX_ID = 1 or p.SEX_ID = 2) and s.STATE_NAME = 'CA'
group by  p.AGE, s2.SEX_NAME
order by  p.AGE, s2.SEX_NAME asc")
dbDisconnect(jdbcConnection)
}
ageTX <- subset(popAll, STATE =='TX')
ageTX <- ddply(ageTX, 'AGE', numcolwise(sum))
ageTX$POPULATION <- as.numeric(ageTX$POPULATION)
ageTX$AGE <- as.numeric(ageTX$AGE)
ggplot(ageTX, aes(x = AGE, y = POPULATION)) + ggtitle("Total Population by Age in TX") + geom_histogram(stat = "identity") + scale_y_continuous(labels = comma)
ageCA <- subset(popAll, STATE =='CA')
ageCA <- ddply(ageCA, 'AGE', numcolwise(sum))
ageCA$POPULATION <- as.numeric(ageCA$POPULATION)
ageCA$AGE <- as.numeric(ageCA$AGE)
ggplot(ageCA, aes(x = AGE, y = POPULATION)) + ggtitle("Total Population by Age in CA") + geom_histogram(stat = "identity") + scale_y_continuous(labels = comma)
maleRatio <- subset(popAll, SEX == 'Male')
maleRatio <- ddply(maleRatio, 'STATE', numcolwise(sum))
# maleRatio <- maleRatio
totalPopState <- subset(popAll, SEX == 'Total')
totalPopState <- ddply(totalPopState, 'STATE', numcolwise(sum))
for (i in 1:51)
{
maleRatio[i,"POPULATION"] <- round(maleRatio[i,"POPULATION"] / totalPopState[i,"POPULATION"], digits = 3 )
}
colnames(maleRatio) <- c("region", 'value')
choroplethr(maleRatio, "state", title = 'Male Ratio by State')
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state", title = 'Population by State', num_buckets=4)
colnames(whiteState) <- c('region', 'race', 'value')
choroplethr(whiteState, "state", title = 'White Population by State', num_buckets=4)
colnames(blackState) <- c('region', 'race', 'value')
choroplethr(blackState, "state", title = 'Black Population by State', num_buckets=4)
colnames(indianState) <- c('region', 'race', 'value')
choroplethr(indianState, "state", title = 'American Indian and Alaska Native Population by State', num_buckets=4)
colnames(asianState) <- c('region', 'race', 'value')
choroplethr(asianState, "state", title = 'Asian by State', num_buckets=4)
colnames(hawaiiState) <- c('region', 'race', 'value')
choroplethr(hawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State', num_buckets=4)
choroplethr(popState, "state", title = 'Population by State', num_buckets=4)
View(popState)
totalPopState <- subset(popAll, SEX == 'Total')
totalPopState <- ddply(totalPopState, 'STATE', numcolwise(sum))
colnames(totalPopState) <- c("region", 'value')
choroplethr(totalPopState, "state", title = 'Population by State', num_buckets=4)
View(totalPopState)
View(totalPopState)
totalPopState <- subset(popAll, SEX == 'Total')
totalPopState <- ddply(totalPopState, 'STATE', numcolwise(sum))
View(totalPopState)
View(popAll)
totalPopStateNum <- ddply(totalPopState, 'POPULATION', numcolwise(sum))
View(totalPopStateNum)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(plyr)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#white pop by state
whiteState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 1
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#black pop by state
blackState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 2
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#native indian pop by state
indianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 3
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#asian pop by state
asianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 4
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#hawaii pop by state
hawaiiState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 5
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#population by state, age, sex
popSAS <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
where p.ORIGIN_ID = 0 and (p.SEX_ID = 1 or p.SEX_ID = 2)
group by s.STATE_NAME, p.AGE, s2.SEX_NAME
order by s.STATE_NAME, p.AGE, s2.SEX_NAME asc")
#total population by state
TotalPop <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as TotalPopulation from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#male population by state
MalePop <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as MalePopulation from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.SEX_ID = 1
group by s.STATE_NAME
order by s.STATE_NAME asc")
#population with state, race, age, sex
popAll <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
where p.ORIGIN_ID = 0
group by s.STATE_NAME, r.RACE_NAME, p.AGE, s2.SEX_NAME
order by s.STATE_NAME, r.RACE_NAME, p.AGE, s2.SEX_NAME asc")
#texas population by different races
TexasAges1 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 1
")
TexasAges2 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 2
")
TexasAges3 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 3
")
TexasAges5 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 5
")
# cali population
popCali <- dbGetQuery(jdbcConnection, "select p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
where p.ORIGIN_ID = 0 and (p.SEX_ID = 1 or p.SEX_ID = 2) and s.STATE_NAME = 'CA'
group by  p.AGE, s2.SEX_NAME
order by  p.AGE, s2.SEX_NAME asc")
dbDisconnect(jdbcConnection)
}
totalPopState <- subset(popAll, SEX == 'Total')
totalPopState <- ddply(totalPopState, 'STATE', numcolwise(sum))
View(totalPopState)
ageCA <- subset(popAll, STATE =='CA')
ageCA <- ddply(ageCA, 'AGE', numcolwise(sum))
ageCA$POPULATION <- as.numeric(ageCA$POPULATION)
ageCA$AGE <- as.numeric(ageCA$AGE)
ggplot(ageCA, aes(x = AGE, y = POPULATION)) + ggtitle("Total Population by Age in CA") + geom_histogram(stat = "identity") + scale_y_continuous(labels = comma)
View(popAll)
#population by age in CA
ageCA <- subset(popAll, STATE =='CA' & SEX =='Total')
ageCA <- ddply(ageCA, 'AGE', numcolwise(sum))
ageCA$POPULATION <- as.numeric(ageCA$POPULATION)
ageCA$AGE <- as.numeric(ageCA$AGE)
ggplot(ageCA, aes(x = AGE, y = POPULATION)) + ggtitle("Total Population by Age in CA") + geom_histogram(stat = "identity") + scale_y_continuous(labels = comma)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(plyr)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#white pop by state
whiteState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 1
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#black pop by state
blackState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 2
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#native indian pop by state
indianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 3
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#asian pop by state
asianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 4
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#hawaii pop by state
hawaiiState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 5
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#population by state, age, sex
popSAS <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
where p.ORIGIN_ID = 0 and (p.SEX_ID = 1 or p.SEX_ID = 2)
group by s.STATE_NAME, p.AGE, s2.SEX_NAME
order by s.STATE_NAME, p.AGE, s2.SEX_NAME asc")
#total population by state
TotalPop <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as TotalPopulation from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#male population by state
MalePop <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as MalePopulation from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.SEX_ID = 1
group by s.STATE_NAME
order by s.STATE_NAME asc")
#population with state, race, age, sex
popAll <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, o.ORIGIN_NAME as Origin, p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
INNER JOIN ORIGIN o on p.ORIGIN_ID = o.ORIGIN_ID
group by s.STATE_NAME, r.RACE_NAME, o.ORIGIN_NAME, p.AGE, s2.SEX_NAME
order by s.STATE_NAME, r.RACE_NAME, p.AGE, s2.SEX_NAME asc")
#texas population by different races
TexasAges1 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 1
")
TexasAges2 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 2
")
TexasAges3 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 3
")
TexasAges5 <- dbGetQuery(jdbcConnection, "select age, CENSUS2010POP as population from POPULATION
where SEX_ID = 0 and Origin_ID = 0 and STATE_ID = 48 and RACE_ID = 5
")
# cali population
popCali <- dbGetQuery(jdbcConnection, "select p.AGE as Age, s2.SEX_NAME as Sex, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN SEX s2 on p.SEX_ID = s2.SEX_ID
where p.ORIGIN_ID = 0 and (p.SEX_ID = 1 or p.SEX_ID = 2) and s.STATE_NAME = 'CA'
group by  p.AGE, s2.SEX_NAME
order by  p.AGE, s2.SEX_NAME asc")
dbDisconnect(jdbcConnection)
}
colnames(whiteState) <- c('region', 'race', 'value')
choroplethr(whiteState, "state", title = 'White Population by State', num_buckets=4)
mapWhiteState <- subset(popAll, RACE =='White' & SEX =='Total' & ORIGIN =='Total')
View(mapWhiteState)
View(whiteState)
mapWhiteState <- ddply(maleRatio, 'STATE', numcolwise(sum))
mapWhiteState <- ddply(mapWhiteState, 'STATE', numcolwise(sum))
View(mapWhiteState)
mapWhiteState <- subset(popAll, RACE =='White' & SEX =='Total' & ORIGIN =='Total')
mapWhiteState <- ddply(mapWhiteState, 'STATE', numcolwise(sum))
colnames(mapWhiteState) <- c('region', 'value')
choroplethr(mapWhiteState, "state", title = 'White Population by State', num_buckets=4)
colnames(blackState) <- c('region', 'race', 'value')
choroplethr(blackState, "state", title = 'Black Population by State', num_buckets=4)
mapBlackState <- subset(popAll, RACE =='Black' & SEX =='Total' & ORIGIN =='Total')
mapBlackState <- ddply(mapBlackState, 'STATE', numcolwise(sum))
colnames(mapBlackState) <- c('region', 'value')
choroplethr(mapBlackState, "state", title = 'Black Population by State', num_buckets=4)
View(mapBlackState)
mapBlackState <- subset(popAll, RACE =='Black or African American' & SEX =='Total' & ORIGIN =='Total')
mapBlackState <- ddply(mapBlackState, 'STATE', numcolwise(sum))
colnames(mapBlackState) <- c('region', 'value')
choroplethr(mapBlackState, "state", title = 'Black Population by State', num_buckets=4)
choroplethr(blackState, "state", title = 'Black Population by State', num_buckets=4)
choroplethr(mapBlackState, "state", title = 'Black Population by State', num_buckets=4)
whiteState <- subset(popAll, RACE =='White' & SEX =='Total' & ORIGIN =='Total')
whiteState <- ddply(whiteState, 'STATE', numcolwise(sum))
colnames(whiteState) <- c('region', 'value')
choroplethr(whiteState, "state", title = 'White Population by State', num_buckets=4)
mapBlackState <- subset(popAll, RACE =='Black or African American' & SEX =='Total' & ORIGIN =='Total')
mapBlackState <- ddply(mapBlackState, 'STATE', numcolwise(sum))
colnames(mapBlackState) <- c('region', 'value')
choroplethr(mapBlackState, "state", title = 'Black Population by State', num_buckets=4)
colnames(indianState) <- c('region', 'race', 'value')
choroplethr(indianState, "state", title = 'American Indian and Alaska Native Population by State', num_buckets=4)
mapIndianState <- subset(popAll, RACE =='American Indian and Alaska Native' & SEX =='Total' & ORIGIN =='Total')
mapIndianState <- ddply(mapIndianState, 'STATE', numcolwise(sum))
colnames(mapIndianState) <- c('region', 'value')
choroplethr(mapIndianState, "state", title = 'American Indian and Alaska Native Population by State', num_buckets=4)
colnames(asianState) <- c('region', 'race', 'value')
choroplethr(asianState, "state", title = 'Asian by State', num_buckets=4)
colnames(asianState) <- c('region', 'race', 'value')
choroplethr(asianState, "state", title = 'Asian by State', num_buckets=4)
colnames(hawaiiState) <- c('region', 'race', 'value')
choroplethr(hawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State', num_buckets=4)
mapHawaiiState <- subset(popAll, RACE =='Native Hawaiian and Other Pacific Islander' & SEX =='Total' & ORIGIN =='Total')
mapHawaiiState <- ddply(mapHawaiiState, 'STATE', numcolwise(sum))
colnames(mapHawaiiState) <- c('region', 'value')
choroplethr(mapHawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State', num_buckets=4)
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state")
mapPopState <- totalPopState
colnames(mapPopState) <- c("region", 'value')
choroplethr(mapPopState, "state", title = 'Population by State', num_buckets=4)
totalPopState <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
totalPopState <- ddply(totalPopState, 'STATE', numcolwise(sum))
mapPopState <- totalPopState
colnames(mapPopState) <- c("region", 'value')
choroplethr(mapPopState, "state", title = 'Population by State', num_buckets=4)
#map population by state
mapPopState <- totalPopState
colnames(mapPopState) <- c("region", 'value')
choroplethr(mapPopState, "state", title = 'Population by State')
ggplot(data = popSAS, aes(x = AGE, y = POPULATION, fill = SEX)) + geom_bar(stat="identity", position=position_dodge()) + facet_wrap(~STATE, scales = "free")+ ggtitle("Population by State") + scale_y_continuous(labels = comma) + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
View(popState)
statePop <- totalPopSate
statePop$STATE2 <- reorder(statePop$STATE, statePop$POPULATION)
cStatePop <- ggplot(statePop, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma) geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = statePop , stat = "identity") + guides(fill=FALSE)
cStatePop <- ggplot(statePop, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma) + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = statePop , stat = "identity") + guides(fill=FALSE)
statePop <- totalPopSate
totalPopState <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
totalPopState <- ddply(totalPopState, 'STATE', numcolwise(sum))
statePop <- totalPopSate
statePop <- totalPopState
statePop$STATE2 <- reorder(statePop$STATE, statePop$POPULATION)
cStatePop <- ggplot(statePop, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma) + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = statePop , stat = "identity") + guides(fill=FALSE)
cStatePop
statePop <- totalPopState
statePop$STATE2 <- reorder(statePop$STATE, statePop$POPULATION)
ggplot(statePop, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma) + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = statePop , stat = "identity") + guides(fill=FALSE)
ggplot(data = popSAS, aes(x = AGE, y = POPULATION, fill = SEX)) + geom_bar(stat="identity", position=position_dodge()) + facet_wrap(~STATE, scales = "free")+ ggtitle("Population by State") + scale_y_continuous(labels = comma) + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
gpopRace <- ggplot(popRace, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
popRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2, fill=POPULATION), color = "black", data = popRace , stat = "identity") + guides(fill=FALSE)
racePop <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
racePop <- ddply(racePop, 'Race', numcolwise(sum))
View(racePop)
racePop <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
racePop <- ddply(racePop, 'RACE', numcolwise(sum))
View(racePop)
racePop <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
racePop <- ddply(racePop, 'RACE', numcolwise(sum))
ggplot(racePop, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma) + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = racePop , stat = "identity") + guides(fill=FALSE)
racePop <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
racePop <- ddply(racePop, 'RACE', numcolwise(sum))
racePop$RACE2 <- reorder(racePop$RACE, racePop$POPULATION)
ggplot(racePop, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma) + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = racePop , stat = "identity") + guides(fill=FALSE)
racePop <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
racePop <- ddply(racePop, 'RACE', numcolwise(sum))
racePop$RACE2 <- reorder(racePop$RACE, racePop$POPULATION)
ggplot(racePop, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma) + geom_bar(aes(x=RACE2, fill=POPULATION), color = "black", data = racePop , stat = "identity") + guides(fill=FALSE)
gpopRace <- ggplot(popRace, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
popRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2, fill=POPULATION), color = "black", data = popRace , stat = "identity") + guides(fill=FALSE)
racePop <- subset(popAll, SEX == 'Total'& ORIGIN =='Total')
racePop <- ddply(racePop, 'RACE', numcolwise(sum))
racePop$RACE2 <- reorder(racePop$RACE, racePop$POPULATION)
ggplot(racePop, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma) + geom_bar(aes(x=RACE2, fill=POPULATION), color = "black", data = racePop , stat = "identity") + guides(fill=FALSE)
View(racePop)
