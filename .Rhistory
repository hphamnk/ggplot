library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
choroplethr(mapState, "state'")
View(mapState)
colnames(mapState) <- c("region", "value")
choroplethr(mapState, "state'")
choroplethr(mapState, "county'")
View(mapState)
View(mapState)
View(popRace)
View(popState)
colnames(popState) <- c("region", "value")
colnames(popState) <- c("region", "value")
View(popState)
choroplethr(popState, "state'")
View(mapState)
View(mapState)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
View(mapState)
View(popRace)
View(popState)
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state'")
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state")
choroplethr(popState, "state", title = "hi")
View(popRace)
View(popState)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state'")
colnames(popState) <- c("region", 'value')
View(popState)
choroplethr(popState, "state")
View(mapState)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state")
View(population)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
#population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
#diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#white pop by state
whiteState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 1
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#black pop by state
blackState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 2
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#native indian pop by state
indianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 3
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#asian pop by state
asianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 4
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#hawaii pop by state
hawaiiState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 5
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
colnames(whiteState) <- c('region', 'race', 'value')
choroplethr(whiteState, "state")
colnames(whiteState) <- c('region', 'race', 'value')
choroplethr(whiteState, "state")
colnames(blackState) <- c('region', 'race', 'value')
choroplethr(blackState, "state")
colnames(indianState) <- c('region', 'race', 'value')
choroplethr(indianState, "state")
colnames(asianState) <- c('region', 'race', 'value')
choroplethr(asianState, "state")
colnames(hawaiiState) <- c('region', 'race', 'value')
choroplethr(hawaiiState, "state")
choroplethr(whiteState, "state", title = 'White Population by State')
choroplethr(blackState, "state", title = 'Black Population by State')
choroplethr(indianState, "state", title = 'American Indian and Alaska Native Population by State')
choroplethr(asianState, "state", title = 'Asian by State')
choroplethr(hawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State')
choroplethr(popState, "state", title = 'Population by State')
choroplethr(whiteState, "state", title = 'White Population by State')
choroplethr(blackState, "state", title = 'Black Population by State')
choroplethr(indianState, "state", title = 'American Indian and Alaska Native Population by State')
choroplethr(asianState, "state", title = 'Asian by State')
choroplethr(hawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State')
View(popRace)
View(popState)
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state", title = 'Population by State')
choroplethr(whiteState, "state", title = 'White Population by State')
choroplethr(blackState, "state", title = 'Black Population by State')
choroplethr(indianState, "state", title = 'American Indian and Alaska Native Population by State')
choroplethr(asianState, "state", title = 'Asian by State')
choroplethr(hawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State')
choroplethr(popState, "state", title = 'Population by State', num_buckets=2)
choroplethr(popState, "state", title = 'Population by State', num_buckets=2)
choroplethr(whiteState, "state", title = 'White Population by State', num_buckets=2)
choroplethr(blackState, "state", title = 'Black Population by State', num_buckets=2)
choroplethr(indianState, "state", title = 'American Indian and Alaska Native Population by State', num_buckets=2)
choroplethr(asianState, "state", title = 'Asian by State', num_buckets=2)
choroplethr(hawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State', num_buckets=2)
choroplethr(popState, "state", title = 'Population by State', num_buckets=3)
choroplethr(popState, "state", title = 'Population by State', num_buckets=4)
choroplethr(popState, "state", title = 'Population by State', num_buckets=4)
choroplethr(whiteState, "state", title = 'White Population by State', num_buckets=4)
choroplethr(blackState, "state", title = 'Black Population by State', num_buckets=4)
choroplethr(indianState, "state", title = 'American Indian and Alaska Native Population by State', num_buckets=4)
choroplethr(asianState, "state", title = 'Asian by State', num_buckets=4)
choroplethr(hawaiiState, "state", title = 'Native Hawaiian and Other Pacific Islander Population by State', num_buckets=4)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
#population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
#diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#white pop by state
whiteState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 1
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#black pop by state
blackState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 2
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#native indian pop by state
indianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 3
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#asian pop by state
asianState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 4
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#hawaii pop by state
hawaiiState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0 and r.RACE_ID = 5
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), data = popState , stat = "identity")
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION, color = "black"), data = popState , stat = "identity")
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity")
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity")
+ scale_y_continuous(labels = comma)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity") + scale_y_continuous(labels = comma)
gpopRace <- ggplot(popRace, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
popRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2, fill=POPULATION), color = "black", data = popRace , stat = "identity")
gpopRace + geom_bar(aes(x=RACE2, fill=POPULATION), color = "black", data = popRace , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
choroplethr(popState, "state", title = 'Population by State', num_buckets=4)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = POPULATION, data = popState , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = color, data = popState , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = STATE, data = popState , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION), color = State, data = popState , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION, color = STATE), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION, color = STATE2), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
gpopState + geom_bar(aes(x=STATE2, fill=POPULATION, color = POPULATION), color = "black", data = popState , stat = "identity") + guides(fill=FALSE)
