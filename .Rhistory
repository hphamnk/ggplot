INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
#ggplot(popRace, aes(y = POPULATION, x = RACE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(popRace, aes(y = POPULATION, x = RACE)) + geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
ggplot(popRace, aes(y = POPULATION, x = RACE)) + geom_bar(stat = "identity")
ggplot(popRace, aes(y = POPULATION, x = RACE)) + geom_bar(stat = "identity") + coord_flip()
ggplot(popRace, aes(y = POPULATION, x = RACE)) + geom_bar(stat = "identity") + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
gpopRace <- ggplot(popRace, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
gpopRace@RACE2 <- reorder(popRace@RACE, popRace@POPULATION)
gpopRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")
gpopRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")
gpopRace <- ggplot(popRace, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
gpopRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")
gpopRace <- ggplot(popRace, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
gpopRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")
popRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")  geom_text(aes(label=y), vjust=0)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=y), vjust=0)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=POPULATION), vjust=0)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=POPULATION), vjust=10)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=POPULATION), vjust=0)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=POPULATION), hjust=10)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=POPULATION), hjust=5)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=POPULATION), hjust=1)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label=POPULATION), hjust=-1)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")
library("ggplot2")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#state population
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
gpopRace <- ggplot(popRace, aes(y = POPULATION, x = RACE)) + coord_flip() + ggtitle("Population by Race") + scale_y_continuous(labels = comma)
popRace$RACE2 <- reorder(popRace$RACE, popRace$POPULATION)
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity")
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text()
gpopRace + geom_bar(aes(x=RACE2), data = popRace , stat = "identity") + geom_text(aes(label = POPULATION))
install.packages("ggmap")
library("ggmap", lib.loc="F:/Program Files/R/R-3.0.3/library")
install.packages("choroplethr")
library("choroplethr", lib.loc="F:/Program Files/R/R-3.0.3/library")
library("ggplot2")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as region, sum(p.CENSUS2010POP) as value
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#pop by state, race
popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
library("ggplot2")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as region, sum(p.CENSUS2010POP) as value
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#pop by state, race
popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as region, sum(p.CENSUS2010POP) as value
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#pop by state, race
popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME, r.RACE_NAME
order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
choroplethr(mapState, "state", num_buckets = 6, title = "mapState", scaleName = "Population, showLabels = T, states = state")
choroplethr(mapState, "state", num_buckets = 6, title = "mapState", scaleName = "Population, showLabels = T)
choroplethr(df_pop_state, "state", title="2012 State Population Estimates")
choroplethr(mapState, "state", num_buckets = 6, title = "mapState", scaleName = "Population, showLabels = T)
View(mapState)
choroplethr(mapState, "state", num_buckets = 6, title = "mapState", scaleName = "Population, showLabels = T)
choroplethr(mapState, "state", num_buckets = 6, title = "mapState", scaleName = "Population", showLabels = T)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
choroplethr(mapState, "state'")
View(mapState)
colnames(mapState) <- c("region", "value")
choroplethr(mapState, "state'")
choroplethr(mapState, "county'")
View(mapState)
View(mapState)
View(popRace)
View(popState)
colnames(popState) <- c("region", "value")
colnames(popState) <- c("region", "value")
View(popState)
choroplethr(popState, "state'")
View(mapState)
View(mapState)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
View(mapState)
View(popRace)
View(popState)
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state'")
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state")
choroplethr(popState, "state", title = "hi")
View(popRace)
View(popState)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state'")
colnames(popState) <- c("region", 'value')
View(popState)
choroplethr(popState, "state")
View(mapState)
library("ggplot2")
options(java.parameters="-Xmx4g")
library(rJava)
library(RJDBC)
library(scales)
library(maps)
library(ggmap)
library(choroplethr)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="F:/Program Files/Java/jdk1.8.0_20/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_hnp248", "orcl_hnp248"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
population <- dbGetQuery(jdbcConnection, "select * from POPULATION")
diamonds <- dbGetQuery(jdbcConnection, "select * from diamonds")
#pop by state
popState <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by s.STATE_NAME
order by s.STATE_NAME asc")
#pop by state
mapState <- dbGetQuery(jdbcConnection, "select p.STATE_ID as region, sum(p.CENSUS2010POP) as value
from POPULATION p
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by p.STATE_ID")
#pop by race
popRace <- dbGetQuery(jdbcConnection, "select r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
from POPULATION p
INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
where p.ORIGIN_ID = 0 and p.SEX_ID = 0
group by r.RACE_NAME
order by r.RACE_NAME asc")
#   #pop by state, race
#   popStateRace <- dbGetQuery(jdbcConnection, "select s.STATE_NAME as State, r.RACE_NAME as Race, sum(p.CENSUS2010POP) as Population
#   from POPULATION p
#      INNER JOIN STATE s on p.STATE_ID = s.STATE_ID
#      INNER JOIN RACE r on  p.RACE_ID = r.RACE_ID
#   where p.ORIGIN_ID = 0 and p.SEX_ID = 0
#   group by s.STATE_NAME, r.RACE_NAME
#   order by s.STATE_NAME asc")
dbDisconnect(jdbcConnection)
}
gpopState <- ggplot(popState, aes(y = POPULATION, x = STATE)) + coord_flip() + ggtitle("Population by State") + scale_y_continuous(labels = comma)
popState$STATE2 <-reorder(popState$STATE, popState$POPULATION)
gpopState + geom_bar(aes(x=STATE2), data = popState , stat = "identity")
colnames(popState) <- c("region", 'value')
choroplethr(popState, "state")
View(population)
